var fs = require("fs");

function __require( file ) {
   var dir = process.cwd().concat("/tmp/test/js/");
   var contents = fs.readFileSync( 
      dir.concat(file),
      "utf-8"
   );
   return contents;
}

eval( __require("/Types/StringDictionary.js") );
eval( __require("/Framework/Router/HashPart.js") );
eval( __require("/Framework/Router/PathPart.js") );
eval( __require("/Framework/Router/QueryPart.js") );
eval( __require("/Framework/Router/HashPart.js") );
eval( __require("/Framework/Router/Route.js") );

describe("Framework.Router.Route tests", function() {
    it("should actually have Framework.Router.Route defined", function() {
        expect(Framework.Router.Route).toBeDefined();
    });
    it("can be created properly", function() {
        var route = new Framework.Router.Route('/asdf/asdf2/asdf3/', function(x) { }, { asdf3 : 'poi' });
        expect(route.pathParts.length).toEqual(3);
        expect(route.pathParts[0].part).toEqual('asdf');
        expect(route.pathParts[0].variable).toEqual(false);
        expect(route.pathParts[0].optional).toEqual(false);
        expect(route.pathParts[0].defaultValue).toEqual('');
        expect(route.pathParts[1].part).toEqual('asdf2');
        expect(route.pathParts[1].variable).toEqual(false);
        expect(route.pathParts[1].optional).toEqual(false);
        expect(route.pathParts[1].defaultValue).toEqual('');
        expect(route.pathParts[2].part).toEqual('asdf3');
        expect(route.pathParts[2].variable).toEqual(false);
        expect(route.pathParts[2].optional).toEqual(false);
        expect(route.pathParts[2].defaultValue).toEqual('poi');
        expect(route.queryParts.length).toEqual(0);
        expect(route.hashParts.length).toEqual(0);
        expect(route.defaultValues).toBeDefined();
        expect(route.url).toEqual('asdf/asdf2/asdf3');
        expect(route.callbacks).toBeDefined();
    });
    it("can be created properly with hash", function() {
        var route = new Framework.Router.Route('/asdf/asdf2/asdf3#testhash', function(x) { }, { asdf3 : 'poi' });
        expect(route.pathParts.length).toEqual(3);
        expect(route.pathParts[0].part).toEqual('asdf');
        expect(route.pathParts[0].variable).toEqual(false);
        expect(route.pathParts[0].optional).toEqual(false);
        expect(route.pathParts[0].defaultValue).toEqual('');
        expect(route.pathParts[1].part).toEqual('asdf2');
        expect(route.pathParts[1].variable).toEqual(false);
        expect(route.pathParts[1].optional).toEqual(false);
        expect(route.pathParts[1].defaultValue).toEqual('');
        expect(route.pathParts[2].part).toEqual('asdf3');
        expect(route.pathParts[2].variable).toEqual(false);
        expect(route.pathParts[2].optional).toEqual(false);
        expect(route.pathParts[2].defaultValue).toEqual('poi');
        expect(route.queryParts.length).toEqual(0);
        expect(route.hashParts.length).toEqual(1);
        expect(route.hashParts[0].part).toEqual('testhash');
        expect(route.hashParts[0].variable).toEqual(false);
        expect(route.hashParts[0].optional).toEqual(false);
        expect(route.hashParts[0].defaultValue).toEqual('');
        expect(route.defaultValues).toBeDefined();
        expect(route.url).toEqual('asdf/asdf2/asdf3#testhash');
        expect(route.callbacks).toBeDefined();
    });
    it("can be created properly with hash bang", function() {
        var route = new Framework.Router.Route('/asdf/asdf2/asdf3#!testhash', function(x) { }, { asdf3 : 'poi' });
        expect(route.pathParts.length).toEqual(3);
        expect(route.pathParts[0].part).toEqual('asdf');
        expect(route.pathParts[0].variable).toEqual(false);
        expect(route.pathParts[0].optional).toEqual(false);
        expect(route.pathParts[0].defaultValue).toEqual('');
        expect(route.pathParts[1].part).toEqual('asdf2');
        expect(route.pathParts[1].variable).toEqual(false);
        expect(route.pathParts[1].optional).toEqual(false);
        expect(route.pathParts[1].defaultValue).toEqual('');
        expect(route.pathParts[2].part).toEqual('asdf3');
        expect(route.pathParts[2].variable).toEqual(false);
        expect(route.pathParts[2].optional).toEqual(false);
        expect(route.pathParts[2].defaultValue).toEqual('poi');
        expect(route.queryParts.length).toEqual(0);
        expect(route.hashParts.length).toEqual(1);
        expect(route.hashParts[0].part).toEqual('testhash');
        expect(route.hashParts[0].variable).toEqual(false);
        expect(route.hashParts[0].optional).toEqual(false);
        expect(route.hashParts[0].defaultValue).toEqual('');
        expect(route.defaultValues).toBeDefined();
        expect(route.url).toEqual('asdf/asdf2/asdf3#!testhash');
        expect(route.callbacks).toBeDefined();
    });
    it("can be created properly with hash and query string", function() {
        var route = new Framework.Router.Route('/asdf/asdf2/asdf3#testhash?something=string', function(x) { }, { asdf3 : 'poi' });
        expect(route.pathParts.length).toEqual(3);
        expect(route.pathParts[0].part).toEqual('asdf');
        expect(route.pathParts[0].variable).toEqual(false);
        expect(route.pathParts[0].optional).toEqual(false);
        expect(route.pathParts[0].defaultValue).toEqual('');
        expect(route.pathParts[1].part).toEqual('asdf2');
        expect(route.pathParts[1].variable).toEqual(false);
        expect(route.pathParts[1].optional).toEqual(false);
        expect(route.pathParts[1].defaultValue).toEqual('');
        expect(route.pathParts[2].part).toEqual('asdf3');
        expect(route.pathParts[2].variable).toEqual(false);
        expect(route.pathParts[2].optional).toEqual(false);
        expect(route.pathParts[2].defaultValue).toEqual('poi');
        expect(route.queryParts.length).toEqual(1);
        expect(route.queryParts[0].part).toEqual('string');
        expect(route.queryParts[0].key).toEqual('something');
        expect(route.queryParts[0].variable).toEqual(false);
        expect(route.queryParts[0].optional).toEqual(false);
        expect(route.queryParts[0].defaultValue).toEqual('');
        expect(route.hashParts.length).toEqual(1);
        expect(route.hashParts[0].part).toEqual('testhash');
        expect(route.hashParts[0].variable).toEqual(false);
        expect(route.hashParts[0].optional).toEqual(false);
        expect(route.hashParts[0].defaultValue).toEqual('');
        expect(route.defaultValues).toBeDefined();
        expect(route.url).toEqual('asdf/asdf2/asdf3#testhash?something=string');
        expect(route.callbacks).toBeDefined();
    });
    it("can be created properly with variables", function() {
        var route = new Framework.Router.Route('/asdf/{asdf2}/asdf3/', function(x) { }, { asdf3 : 'poi' });
        expect(route.pathParts.length).toEqual(3);
        expect(route.pathParts[0].part).toEqual('asdf');
        expect(route.pathParts[0].variable).toEqual(false);
        expect(route.pathParts[0].optional).toEqual(false);
        expect(route.pathParts[0].defaultValue).toEqual('');
        expect(route.pathParts[1].part).toEqual('asdf2');
        expect(route.pathParts[1].variable).toEqual(true);
        expect(route.pathParts[1].optional).toEqual(false);
        expect(route.pathParts[1].defaultValue).toEqual('');
        expect(route.pathParts[2].part).toEqual('asdf3');
        expect(route.pathParts[2].variable).toEqual(false);
        expect(route.pathParts[2].optional).toEqual(false);
        expect(route.pathParts[2].defaultValue).toEqual('poi');
        expect(route.queryParts.length).toEqual(0);
        expect(route.defaultValues).toBeDefined();
        expect(route.url).toEqual('asdf/{asdf2}/asdf3');
        expect(route.callbacks).toBeDefined();
    });
    it("can be created properly with optional variables", function() {
        var route = new Framework.Router.Route('/asdf/{^asdf2}/asdf3/', function(x) { }, { asdf3 : 'poi' });
        expect(route.pathParts.length).toEqual(3);
        expect(route.pathParts[0].part).toEqual('asdf');
        expect(route.pathParts[0].variable).toEqual(false);
        expect(route.pathParts[0].optional).toEqual(false);
        expect(route.pathParts[0].defaultValue).toEqual('');
        expect(route.pathParts[1].part).toEqual('asdf2');
        expect(route.pathParts[1].variable).toEqual(true);
        expect(route.pathParts[1].optional).toEqual(true);
        expect(route.pathParts[1].defaultValue).toEqual('');
        expect(route.pathParts[2].part).toEqual('asdf3');
        expect(route.pathParts[2].variable).toEqual(false);
        expect(route.pathParts[2].optional).toEqual(false);
        expect(route.pathParts[2].defaultValue).toEqual('poi');
        expect(route.queryParts.length).toEqual(0);
        expect(route.defaultValues).toBeDefined();
        expect(route.url).toEqual('asdf/{^asdf2}/asdf3');
        expect(route.callbacks).toBeDefined();
    });
    it("can be created properly with optional path parts", function() {
        var route = new Framework.Router.Route('/asdf/asdf2/^asdf3/', function(x) { }, { asdf3 : 'poi' });
        expect(route.pathParts.length).toEqual(3);
        expect(route.pathParts[0].part).toEqual('asdf');
        expect(route.pathParts[0].variable).toEqual(false);
        expect(route.pathParts[0].optional).toEqual(false);
        expect(route.pathParts[0].defaultValue).toEqual('');
        expect(route.pathParts[1].part).toEqual('asdf2');
        expect(route.pathParts[1].variable).toEqual(false);
        expect(route.pathParts[1].optional).toEqual(false);
        expect(route.pathParts[1].defaultValue).toEqual('');
        expect(route.pathParts[2].part).toEqual('asdf3');
        expect(route.pathParts[2].variable).toEqual(false);
        expect(route.pathParts[2].optional).toEqual(true);
        expect(route.pathParts[2].defaultValue).toEqual('poi');
        expect(route.queryParts.length).toEqual(0);
        expect(route.defaultValues).toBeDefined();
        expect(route.url).toEqual('asdf/asdf2/^asdf3');
        expect(route.callbacks).toBeDefined();
    });
    it("run works with paths", function() {
        var route = new Framework.Router.Route('/asdf/asdf2/asdf3/', function(x) { }, { });
        expect(route.run('/asdf/asdf2/asdf3/')).toEqual(true);
        expect(route.run('/asdf/asdf2/asdf2/')).toEqual(false);
        expect(route.run('/asdf2/asdf2/asdf3/')).toEqual(false);
        expect(route.run('/asdf/asdf/asdf3/')).toEqual(false);
    });
    it("run works with variables", function() {
        var route = new Framework.Router.Route('/asdf/{asdf2}/asdf3/', function(x) { }, { });
        expect(route.run('/asdf/asdf2/asdf3/')).toEqual(true);
        expect(route.run('/asdf/asdf2/asdf2/')).toEqual(false);
        expect(route.run('/asdf2/asdf2/asdf3/')).toEqual(false);
        expect(route.run('/asdf/asdf/asdf3/')).toEqual(true);
    });
    it("run works with optional variables", function() {
        var route = new Framework.Router.Route('/asdf/asdf2/{^asdf3}/', function(x) { }, { });
        expect(route.run('/asdf/asdf2/asdf3/')).toEqual(true);
        expect(route.run('/asdf/asdf2/asdf2/')).toEqual(true);
        expect(route.run('/asdf2/asdf2/asdf3/')).toEqual(false);
        expect(route.run('/asdf/asdf/asdf3/')).toEqual(false);
        expect(route.run('/asdf/asdf2/')).toEqual(true);
    });
    it("run works with optional path parts", function() {
        var route = new Framework.Router.Route('/asdf/asdf2/^asdf3/', function(x) { }, { });
        expect(route.run('/asdf/asdf2/asdf3/')).toEqual(true);
        expect(route.run('/asdf/asdf2/asdf2/')).toEqual(true);
        expect(route.run('/asdf2/asdf2/asdf3/')).toEqual(false);
        expect(route.run('/asdf/asdf/asdf3/')).toEqual(false);
        expect(route.run('/asdf/asdf2/')).toEqual(true);
    });
    it("run works with optional variables and default values", function() {
        var resultingValue = '';
        var route = new Framework.Router.Route('/asdf/asdf2/{^asdf3}/', function(x) { resultingValue = x.asdf3; }, { asdf3 : 'poi' });
        expect(route.run('/asdf/asdf2/asdf3/')).toEqual(true);
        expect(resultingValue).toEqual('asdf3');
        resultingValue = '';
        expect(route.run('/asdf/asdf2/asdf2/')).toEqual(true);
        expect(resultingValue).toEqual('asdf2');
        resultingValue = '';
        expect(route.run('/asdf2/asdf2/asdf3/')).toEqual(false);
        expect(resultingValue).toEqual('');
        resultingValue = '';
        expect(route.run('/asdf/asdf/asdf3/')).toEqual(false);
        expect(resultingValue).toEqual('');
        resultingValue = '';
        expect(route.run('/asdf/asdf2/')).toEqual(true);
        expect(resultingValue).toEqual('poi');
    });
});